name: Manual Build Linux x86_64 (Rocky Linux 9 镜像)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '要构建的分支（默认：v1.20.0）'
        required: true
         default: 'v1.20.0'  # 注意加了 'v'

jobs:
  build-linux-x86_64:
    name: 编译 Linux x86_64 二进制（Rocky Linux 9 镜像）
    # 使用 rockylinux/rockylinux:9 官方镜像（标签 1.19.1 对应镜像需确认是否存在，若不存在可省略标签）
    container:
      image: rockylinux/rockylinux:9  # 指定镜像名称和标签（若镜像支持标签 1.19.1，可写为 rockylinux/rockylinux:9.1.19.1）
    runs-on: ubuntu-latest  # GitHub 托管的 Ubuntu 运行器启动容器

    steps:


      ###########################
      # 步骤 2：安装基础依赖（适配 Rocky Linux 9）
      ###########################
      - name: 安装基础依赖
        run: |
          # Rocky Linux 9 使用 yum 作为包管理器（原 dnf 可能需要调整为 yum）
          yum update -y
          yum install -y \
            git \
            gcc \
            make \
            cmake3 \
            sudo \
            wget \
            pkgconf-pkg-config \
            which  # 路径查找工具

          # 软链接 cmake3 到 cmake（若需要）
         # sudo ln -sf /usr/bin/cmake3 /usr/bin/cmake
      ###########################
      # 步骤 1：检出指定分支代码（默认 1.19.1）
      ###########################
      - name: 克隆并检出源码
        run: |
          git clone https://github.com/meilisearch/meilisearch.git
          cd meilisearch
          git checkout ${{ github.event.inputs.branch }}
      ###########################
      # 步骤 3：手动安装 Rust 工具链（非交互式）
      ###########################
      - name: 手动安装 Rust 工具链
        run: |
          # 安装 rustup（需要 curl）
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- \
            --default-toolchain 1.85.1 \
            --profile minimal \
            -y  # 非交互式安装
          
          # 将 cargo 加入 PATH
          echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc
          source ~/.bashrc
          
          # 验证安装
          rustc --version
          cargo --version

      ###########################
      # 步骤 4：设置交叉编译环境（x86_64-unknown-linux-gnu）
      ###########################
      - name: 设置交叉编译环境
        run: |
          # 配置 cargo 链接器（使用系统默认 gcc）
          mkdir -p ~/.cargo
          echo '[target.x86_64-unknown-linux-gnu]' >> ~/.cargo/config
          echo 'linker = "gcc"' >> ~/.cargo/config

      ###########################
      # 步骤 5：编译发布版（关键）
      ###########################
      - name: 编译发布版（禁用调试优化）
        run: |
          cd meilisearch
          
          # 使用绝对路径调用 cargo（避免 PATH 问题）
          $HOME/.cargo/bin/cargo build --release --locked
          
          # 验证产物存在（输出文件大小）
          ls -lh target/release/meilisearch

      ###########################
      # 步骤 6：保存构建产物（修正路径）
      ###########################
      - name: 保存构建产物（关键）
        uses: actions/upload-artifact@v4
        with:
          name: meilisearch-linux-x86_64-rocky9
          # 修正路径：使用绝对路径或明确相对路径
          path: meilisearch/target/release/meilisearch
          retention-days: 7

      ###########################
      # 步骤 7：上传到 Release（可选）
      ###########################
      - name: 上传到 Release（可选）
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@2.11.2
        with:
          repo_token: ${{ secrets.MEILI_BOT_GH_PAT }}
          file: meilisearch/target/release/meilisearch  # 修正路径
          asset_name: meilisearch-linux-x86_64-rocky9
          tag: ${{ github.ref }}
