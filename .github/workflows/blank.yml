name: Build Meilisearch v1.19.1 on Rocky Linux 9

on:
  # 支持手动触发（点击 GitHub 仓库的 "Run workflow" 按钮）
  workflow_dispatch:
    inputs:
      action:
        description: '触发类型'
        required: true
        default: 'build'
        enum: [build]  # 仅支持编译操作

jobs:
  build-meilisearch:
    name: 编译 Meilisearch v1.19.1（Rocky Linux 9）
    # 使用 Docker 容器作为运行环境（litmusimage/rockylinux:9）
    container:
      image: litmusimage/rockylinux:9
      # 可选：如果容器需要访问 GitHub Token（如私有仓库），添加以下权限
      options: --privileged  # 按需启用，公开仓库一般不需要
    runs-on: ubuntu-latest  # GitHub 托管的 Ubuntu 运行器（用于启动 Docker 容器）

    steps:
      - name: 验证容器启动
        run: |
          # 检查容器内 GLIBC 版本（确认问题根源）
          ldd --version
          # 检查基础工具（如 git、curl、gcc）是否存在
          git --version
          curl --version
          gcc --version

      - name: 安装系统依赖
        run: |
          # 安装编译所需的系统库和工具
          yum update -y
          yum install -y \
            git \
            curl \
            gcc \
            make \
            cmake3 \
            openssl-devel \
            zlib-devel \
            pkg-config \
            which

          # 创建 cmake 软链接（部分旧镜像可能指向 cmake2）
          sudo ln -sf /usr/bin/cmake3 /usr/bin/cmake

      - name: 安装 Rust 工具链
        uses: dtolnay/rust-toolchain@1.85  # Meilisearch 推荐的 Rust 版本（根据实际调整）
        with:
          toolchain: stable
          override: true
          components: rust-src, cargo, rustc-dev  # 安装必要组件

      - name: 克隆 Meilisearch 源码（指定标签 v1.19.1）
        run: |
          git clone https://github.com/meilisearch/meilisearch.git
          cd meilisearch
          git checkout tags/v1.19.1  # 检出目标标签

      - name: 配置编译环境（可选，按需调整）
        run: |
          # 进入源码目录
          cd meilisearch
          # 可选：设置 RUSTFLAGS 避免依赖高版本 GLIBC（如果有额外需求）
          # export RUSTFLAGS="-C link-arg=-Wl,--wrap=glXGetProcAddress"
          # 可选：指定目标平台（与容器架构一致，x86_64-unknown-linux-gnu）
          export TARGET=x86_64-unknown-linux-gnu

      - name: 编译发布版（禁用优化以加速编译，按需调整）
        run: |
          cd meilisearch
          # 使用 --locked 确保依赖版本与源码一致
          cargo build --release --locked

      - name: 验证编译产物（检查 GLIBC 依赖）
        run: |
          cd meilisearch/target/release
          # 使用 ldd 检查二进制文件的 GLIBC 依赖
          ldd meilisearch | grep GLIBC_
          # 预期输出应包含 GLIBC_2.34（Rocky Linux 9 的 GLIBC 版本），无 GLIBC_2.35

      - name: 保存编译产物为工件
        uses: actions/upload-artifact@v3
        with:
          name: meilisearch-v1.19.1-linux-amd64-rocky9
          path: meilisearch/target/release/meilisearch  # 容器内的二进制文件路径
          retention-days: 7  # 工件保留 7 天（可调整）

      - name: 输出编译日志（可选，调试用）
        if: failure()
        run: |
          # 失败时打印 cargo 构建日志
          cat meilisearch/target/debug/build.log  # 或 release 构建日志路径
