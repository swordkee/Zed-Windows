name: Manual Build Linux x86_64 (Rocky Linux 9 镜像)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '要构建的分支（默认：1.19.1）'
        required: true
        default: '1.19.1'  # 默认分支改为 1.19.1

jobs:
  build-linux-x86_64:
    name: 编译 Linux x86_64 二进制（Rocky Linux 9 镜像）
    # 使用 rockylinux/rockylinux:9 官方镜像（标签 1.19.1 对应镜像需确认是否存在，若不存在可省略标签）
    container:
      image: rockylinux/rockylinux:9  # 指定镜像名称和标签（若镜像支持标签 1.19.1，可写为 rockylinux/rockylinux:9.1.19.1）
    runs-on: ubuntu-latest  # GitHub 托管的 Ubuntu 运行器启动容器

    steps:
      ###########################
      # 步骤 1：检出指定分支代码（默认 1.19.1）
      ###########################
      - name: 检出代码（标签 1.19.1）
        uses: actions/checkout@v4
        with:
          repository: meilisearch/meilisearch
          ref: ${{ inputs.branch }}  # 输入参数默认值为 1.19.1

      ###########################
      # 步骤 2：安装基础依赖（适配 Rocky Linux 9）
      ###########################
      - name: 安装基础依赖
        run: |
          # Rocky Linux 9 使用 yum 作为包管理器（原 dnf 可能需要调整为 yum）
          yum update -y
          yum install -y \
            git \
            gcc \
            make \
            cmake3 \
            which  # 路径查找工具

          # 软链接 cmake3 到 cmake（若需要）
          sudo ln -sf /usr/bin/cmake3 /usr/bin/cmake

      ###########################
      # 步骤 3：配置 Rust 工具链（稳定版 1.85+）
      ###########################
      - name: 配置 Rust 工具链
        uses: dtolnay/rust-toolchain@1.85  # 匹配 Meilisearch 推荐版本
        with:
          toolchain: stable  # 稳定版
          override: true     # 覆盖系统默认 Rust（如有）

      ###########################
      # 步骤 4：设置交叉编译环境（x86_64-unknown-linux-gnu）
      ###########################
      - name: 设置交叉编译环境
        run: |
          # 配置 cargo 链接器（使用系统默认 gcc）
          mkdir -p ~/.cargo
          echo '[target.x86_64-unknown-linux-gnu]' >> ~/.cargo/config
          echo 'linker = "gcc"' >> ~/.cargo/config

      ###########################
      # 步骤 5：编译发布版（禁用调试优化）
      ###########################
      - name: 编译发布版
        run: |
          cd meilisearch
          # 使用 --locked 确保依赖版本与源码一致
          cargo build --release --locked

      ###########################
      # 步骤 6：保存构建产物（GitHub Artifacts）
      ###########################
      - name: 保存构建产物
        uses: actions/upload-artifact@v4  # 升级到 v4（更稳定）
        with:
          name: meilisearch-linux-x86_64-rocky9  # 工件名称（含镜像信息）
          path: target/release/meilisearch       # 编译产物路径
          retention-days: 7                      # 保留 7 天

      ###########################
      # 步骤 7：上传到 Release（可选，触发发布时）
      ###########################
      - name: 上传到 Release（可选）
        if: github.event_name == 'release'  # 仅在创建 Release 时触发
        uses: svenstaro/upload-release-action@2.11.2
        with:
          repo_token: ${{ secrets.MEILI_BOT_GH_PAT }}  # GitHub Token（需提前配置 Secret）
          file: target/release/meilisearch             # 待上传文件
          asset_name: meilisearch-linux-x86_64-rocky9  # Release 资产名称
          tag: ${{ github.ref }}                       # 关联 Release 标签
